vars(V,[V]) :- atom(V).
vars(non(X),Vars) :- vars(X,Vars).
vars(sau(X,Y),Vars) :- vars(X,VarsX), vars(Y,VarsY), union(VarsX,VarsY,Vars).
vars(si(X,Y),Vars) :- vars(X,VarsX), vars(Y,VarsY), union(VarsX,VarsY,Vars).
vars(imp(X,Y),Vars) :- vars(X,VarsX), vars(Y,VarsY), union(VarsX,VarsY,Vars).
% nu fol append in loc de union (reuninuea a doua multimi) pt ca vrem sa
% scoatem duplicatele

% e(x)
val(V,[(V,A)|_],A).
val(V,[_|T],A) :- val(V,T,A).

%boolean non/si/sau/imp
bnon(1,0).
bnon(0,1).
bsi(1,1,1).
bsi(0,0,0). bsi(0,1,0). bsi(1,0,0).
bsau(0,0,0).
bsau(1,0,1). bsau(0,1,1). bsau(1,1,1).
% X -> Y = (non X) sau Y
bimp(X,Y,Rez) :- bnon(X,NonX), bsau(NonX,Y,Rez).

% e+(x)
eval(V,E,Rez) :- atom(V), val(V,E,Rez).
eval(non(X),E,Rezfin) :- eval(X,E,RezX), bnon(RezX,Rezfin).
eval(sau(X,Y),E,Rezfin) :- eval(X,E,RezX), eval(Y,E,RezY), bsau(RezX,RezY,Rezfin).
eval(si(X,Y),E,Rezfin) :- eval(X,E,RezX), eval(Y,E,RezY), bsi(RezX,RezY,Rezfin).
eval(imp(X,Y),E,Rezfin) :- eval(X,E,RezX), eval(Y,E,RezY), bimp(RezX,RezY,Rezfin).

% e adevarat atunci cand As e lista rezultatelor evaluarii lui X in
% fiecare din elementele lui Es
evals(_,[],[]).
evals(X,[E1|Es],[A1|As]) :- eval(X,Es,As), eval(X,E1,A1).

% e adevarat cand Es e lista evaluarilor definite pe S
evs([],[[]]).
evs([V|T],Es) :- evs(T,Esp), adauga(V,Esp,Es).
adauga(_,[],[]).
adauga(V,[E|T], [[(V,0)|E],[(V,1)|E]|Es]) :- adauga(V,T,Es).

% e adevarat cand As este lista rezultatelor evaluarii lui X in fiecare
% dintre elementele listei evaluarilor definite pe Var(X)
all_evals(X,As) :- vars(X,S), evs(S,Es), evals(X,Es,As).

% tautologie

